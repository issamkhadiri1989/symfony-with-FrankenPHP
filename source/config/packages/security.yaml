security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'plaintext'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        custom_ldap_provider:
            id: App\Security\Ldap\User\Provider\LdapUserProvider

        ldap_user_provider:
            ldap:
                service: Symfony\Component\Ldap\Ldap
                base_dn: dc=ramhlocal,dc=com
                search_dn: "cn=admin,dc=ramhlocal,dc=com"
                search_password: 'admin_pass'
                default_roles: ROLE_USER
                uid_key: uid
                extra_fields: [ 'mail', 'userPassword' ]
                password_attribute: 'userPassword'

        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: ldap_user_provider
            custom_authenticator: App\Security\LdapLoginFormAuthenticator
#            form_login_ldap:
#                check_path: app_security
#                login_path: app_security
#                service: Symfony\Component\Ldap\Ldap
#                dn_string: 'uid={user_identifier},dc=ramhlocal,dc=com'
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
#         - { path: ^/ldap, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
